{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,MAAOC,SAASC,cAAc,gBAC9BC,KAAMF,SAASC,cAAc,eAC7BE,OAAQH,SAASC,cAAc,iBAC/BG,KAAMJ,SAASC,cAAc,UAG1BI,EAA0BP,EAA1BC,MAAMO,EAAoBR,EAApBI,KAAKK,EAAeT,EAAfK,OAwBhB,SAASK,EAAcC,EAAUC,GAW/B,OAVgB,IAAIC,SAAQ,SAACC,EAASC,G,OACpCC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUV,MAAAW,IAEpBG,EAAO,CAAEJ,WAAUV,MAAAW,G,GAEpBA,E,IAjCwBZ,EAARM,KAClBa,iBAAiB,UAEtB,SAA4BC,GAC1BA,EAAEC,iBACFb,EAAOc,OAAOd,EAAKe,OACnBhB,EAAQe,OAAOf,EAAMgB,OACrBd,EAASa,OAAOb,EAAOc,OACvBC,QAAQC,IAAI,SAAUjB,EAAKe,OAC1B,IAAI,IAAIG,EAAW,EAAGA,GAAYjB,EAAQiB,IACzCF,QAAQC,IAAI,UACXf,EAAagB,EAAUnB,GACrBoB,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUkB,EAAKD,EAAL3B,MAEjB6B,EAAAhC,GAASiC,OAAOC,QAAQ,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANJ,EAAM,M,IAEvEK,OAAM,SAAAN,G,IAAGjB,EAAQiB,EAARjB,SAAUwB,EAAKP,EAAL3B,MAElB6B,EAAAhC,GAASiC,OAAOK,QAAQ,sBAAqCH,OAAftB,EAAS,QAAYsB,OAANE,EAAM,M,IAEvE5B,GAASC,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  delay: document.querySelector('[name=delay]'),\n  step: document.querySelector('[name=step]'),\n  amount: document.querySelector('[name=amount]'),\n  form: document.querySelector('.form'),\n};\n\nlet {delay,step,amount,form} = refs;\nform.addEventListener('submit',createPromiseStart)\n\nfunction createPromiseStart(e) {\n  e.preventDefault();\n  step = Number(step.value);\n  delay = Number(delay.value);\n  amount = Number(amount.value);\n  console.log('я then',step.value);\n  for (let position = 1; position <= amount; position++) {\n    console.log('я then');\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n           // Fulfill\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n          // Reject\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += step;\n  }\n};\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) =>\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay)\n  );\n  return promise;\n};\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","Number","value","console","log","position1","then","param","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.75f31bb5.js.map"}